import sys
input = sys.stdin.readline
sys.setrecursionlimit(10**6)


def dfs(mother):
    for child in tree[mother]:
        if(parent[child] == 0):
            parent[child] = mother

            dfs(child)


N = int(input())

#풀이 방법
#예를 들어 트리가 아래와 같은 구조라고 하자
#           1
#       2       4
#         5    3  6
#그리고 parent 배열이 N+1 길이로 존재하는데 처음에는 모든 값이 0이다.
#루트 노드인 1부터 탐색을 들어간다고 했을 때 1의 자식 노드는 2, 4이다.
#이때 parent[2] = 0이고 parent[4] = 0인 상황이고 이 의미는 아직 2, 4가
#각자의 부모 노드가 무엇인지 모른다는 뜻이다.
#그러므로 둘다 parent 배열의 값을 1로 바꿔준다. 그러면 1과 2, 4가 연결되는 것으로 볼 수 있다.
#이와 같은 방법으로 모든 자식 노드의 부모 노드를 연결해주고 최종적으로 parent를 출력한다.
#다만 위의 트리는 무방향성 트리이므로 1->2, 2->1을 모두 저장해야한다.

tree = [[] for _ in range(0, N+1)]
parent = [0]*(N+1)
for _ in range(0, N-1):
    start, destination = map(int, input().split())
    tree[start].append(destination)
    tree[destination].append(start)

for i in range(1, N+1):
    dfs(i)

for j in range(2, N+1):
    print(parent[j])