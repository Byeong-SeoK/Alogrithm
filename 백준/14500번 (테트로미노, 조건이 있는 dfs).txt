def tetromino(x, y, result, count):
    global MAX

    if(count == 4):
        MAX = max(MAX, result)
        return

    else:
        for i in range(0, 4):
            nx = x + dx[i]
            ny = y + dy[i]
            if(0 <= nx < N and 0 <= ny < M and not visited[nx][ny]):
                if(count == 2): #ㅗ, ㅜ모양을 만들기 위해 넣은 조건이다.
                    #이를 위해서는 nx, ny라는 인근의 새로운 블럭에서 탐색을 시작하는 것이 아니라
                    #현재 위치해있는 블럭에서 아랫쪽, 위쪽, 오른쪽을 탐색하도록 만들어야한다.
                    #그래서 nx, ny를 사용하는 것이 아니라 x, y를 사용해야한다.
                    
                    visited[nx][ny] = True
                    result = result + paper[nx][ny]

                    tetromino(x, y, result, count+1)

                    result = result - paper[nx][ny]
                    visited[nx][ny] = False

                visited[nx][ny] = True
                result = result + paper[nx][ny]

                tetromino(nx, ny, result, count+1)

                result = result - paper[nx][ny]
                visited[nx][ny] = False



dx = [0, 0, -1, 1]
dy = [1, -1, 0, 0]
#(dx,dy)의 확장 형태가 0번째 index부터 3번째 index 순으로 동서남북이다.

N, M = map(int, input().split())
#N은 가로를 M은 세로를 의미하는 변수이다.

paper = [] #종이에 쓰여있는 숫자를 받는 배열
for i in range(0, N):
    temp = list(map(int, input().split()))
    paper.append(temp)

count = 0 #방문 횟수는 4회 제한이고 이를 지키기 위해 있는 변수이다.
MAX = 0 #테트로미노를 통해 얻을 수 있는 값의 최대값을 받는 변수
result = 0 #MAX와 비교하기 위해 중간중간에 나온 값을 저장할 변수
visited = [[False]*M for _ in range(0, N)] #특정 칸에 방문하였는지를 받는 배열이다.
#방문을 한 칸은 다시 방문할 필요가 없으므로 방문 여부를 판단하여 탐색할 지 말지를 결정한다.

for i in range(0, N):
    for j in range(0, M):
        visited[i][j] = True
        result = result + paper[i][j]

        tetromino(i, j, result, count+1)

        result = result - paper[i][j]
        visited[i][j] = False

print(MAX)