import heapq
import sys
input = sys.stdin.readline

def dijkstra():
    dx = [0,0,1,-1]
    dy = [1,-1,0,0]

    visited = [[1e9 for _ in range(0, N)] for _ in range(0, N)]
    visited[0][0] = cave[0][0]

    queue = []
    heapq.heappush(queue, [cave[0][0], 0, 0])
    #최소힙은 첫번째 인자를 기반으로 정렬된다.

    while queue:
        cost, x, y = heapq.heappop(queue)

        for i in range(0, 4):
            nx = x + dx[i]
            ny = y + dy[i]

            if(0 <= nx < N and 0 <= ny < N):
                new_cost = cost + cave[nx][ny]
                if(new_cost < visited[nx][ny]):
                    #만약 현재 계산된 값이 더 클 때만 새로이 연산한 값을 넣는다.
                    visited[nx][ny] = new_cost
                    heapq.heappush(queue, [visited[nx][ny], nx, ny])


    return visited[N-1][N-1]


problem = 1
while True:
    N = int(input())

    if(N == 0):
        break

    cave = []
    for _ in range(0, N):
        cave.append(list(map(int, input().split())))

    cost = dijkstra()

    print('Problem ' + str(problem) + ": " + str(cost))
    problem = problem+1