import sys
input = sys.stdin.readline

sen1 = " " + input().rstrip()
sen2 = " " + input().rstrip()


LCS = [[""]*len(sen2) for _ in range(0, len(sen1))]
#LCS는 sen1과 sen2 사이의 가장 긴 부분 문자열을 가지고 있는 배열이다.

#문제풀이 접근 방식
# LCS[i][j]는 A의 i번째까지의 문자열과
# B의 j번째까지의 문자열의 LCS 길이 값을 의미한다.
# LCS[i][j]에서, 만약 A[i] == B[j]라면
# 그 두 문자를 제외한 i-1개, j-1개의 LCS
# 만약 다르다면, i-1개, j개와 i개, j-1개
# 일 때의 LCS 중 큰 값 갖도록 한다. 
# i-1개, j-1개는 어차피 저 두 케이스보다 반드시 작거나 같으므로 두 케이스만 고려한다.
# 그런데 LCS 리스트 원소 값이 LCS 길이 값을 의미하므로,
# 원소를 LCS 문자열 자체로 둬도 된다.
# 그럼 길이 값도 갖고 최단 경로도 갖고 있게 된다.

for i in range(1, len(sen1)):
    for j in range(1, len(sen2)):
        if(sen1[i] == sen2[j]):
            LCS[i][j] = LCS[i-1][j-1]+sen2[j]
            #sen1의 문자와 sen2의 문자가 같으면 i-1, j-1의 지점의 LCS에
            #sen1[i]나 sen2[j]를 더한 것이 새로운 LCS가 된다.

        else:
            if(len(LCS[i-1][j]) < len(LCS[i][j-1])):
                LCS[i][j] = LCS[i][j-1]

            else:
                LCS[i][j] = LCS[i-1][j]

#print(LCS)

result = LCS[-1][-1]
print(len(result), result, sep="\n")