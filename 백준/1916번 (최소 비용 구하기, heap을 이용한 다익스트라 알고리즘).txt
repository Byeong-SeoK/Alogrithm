import heapq
import sys
input = sys.stdin.readline

#다익스트라에서 heap을 사용해야하는 이유
# 힙 이용 없이 알고리즘을 그대로 구현하면, 매번 최단 거리가 가장 짧은 노드를 선형 탐색해야 하고,
# 현재 노드와 연결된 노드를 매번 일일이 확인해야 한다.
# 노드의 개수가 10,000개를 넘어가는 문제라면, 문제를 해결하기 어려워진다.
# 힙 자료구조를 이용하게 되면, 특정 노드까지의 최단 거리에 대한 정보를 힙에 담아 처리하므로
# 출발 노드부터 가장 거리가 짧은 노드를 더 빠르게 찾을 수 있다.

def dijkstra(x):
    pq = []
    heapq.heappush(pq, (0, x)) #출발 지점을 heapq에 넣는다.
    visited[x] = 0 #첫 출발점까지 드는 비용은 0이다.

    while pq:
        d, x = heapq.heappop(pq)
        #d는 현재 도시까지 갈 때 드는 비용이다.
        #x는 현재 도시가 몇 번 도시인지에 대한 것이다.

        if visited[x] < d:
            #만약 해당 도시까지 가는 비용이 현재 알고 있는 해당 도시 가는 방법에 대한 비용보다
            #더 큰 경우 더 많은 비용이 드므로 건너 뛰도록 한다.
            #즉, 더 많이 비용이 드는 경로는 탐색하지 않는다.
            continue

        for nw, nx in bus[x]:
            #현재 도시에서 이동할 수 있는 다른 모든 도시에 대해 접근한다.
            #이때 nw는 다음 도시로 갈 때 드는 비용을 가지고 있고
            #nx는 다음 도시가 몇 번 도시인지를 가지고 있다.
            
            nd = d + nw 
            #다음 도시로 갈 때까지의 총 비용은 현재까지 드는 비용에 다음 도시갈 때의 비용을 더한 것이다.

            if visited[nx] > nd:
                #만약 이동하려는 도시까지 드는 원래 알고 있던 총비용이 새로이 구한 총비용보다 크면
                #그 값을 업데이트 한다. 또 해당 도시를 heap에 넣어 탐색하도록 한다.
                #이때 heap에서는 자동으로 가장 최소 비용이 드는 지점이 제일 앞에 오도록 정렬해준다.
                heapq.heappush(pq, (nd, nx))
                visited[nx] = nd



N = int(input()) #도시의 개수
M = int(input()) #버스의 개수

bus = [[] for _ in range(0, N+1)] #bus의 index는 출발 도시를 의미하고 들어있는 값은 [비용, 도착 도시]이다.
for i in range(0, M):
    city1, city2, cost = list(map(int, input().split()))
    bus[city1].append([cost, city2]) #각 출발 도시에서 도착할 수 있는 도시에 대한 정보를 담는다.
    #cost가 city2보다 먼저 들어가는 이유는 heap이 자체적으로 최소힙으로 정렬할 때
    #0번째 index를 기반으로 정렬한다. 그러므로 최소 비용으로 도착지점에 가기 위해서
    #항상 최소비용인 지점만 탐색하도록 하기 위해서는 cost가 city2보다 먼저 들어가야 한다.


start, end = map(int, input().split())

visited = [1e9]*(N+1) #visited 배열은 각 도시까지의 비용을 값으로 가지고 있다.

dijkstra(start)

print(visited[end])