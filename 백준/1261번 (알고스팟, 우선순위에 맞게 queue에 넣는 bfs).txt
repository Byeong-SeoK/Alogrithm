from collections import deque
import sys
input = sys.stdin.readline


def bfs(sx, sy):
    queue = deque()
    queue.append([sx, sy])

    visited = [[0 for _ in range(0, N)] for _ in range(0, M)]
    #x, y에서 탐색되는 곳은 0일 때는 [x][y]와 같은 값을 갖거나
    #1일 때는 모두 [x][y]에 +1을 한 값을 가져야 하므로
    #visited[x][y] or visited[x][y]+1로 하도록 하기 위해서
    #이렇게 2차원 배열을 선언한다. 또 이 배열은 방문 여부를 포함하기도 한다.
    #만약 이런 2차원 배열이 아닌 변수로 선언하면 매 탐색마다
    #탐색 했음에 대한 정보가 누적되어 매우 큰 숫자가 저장되게 된다.
    
    visited[0][0] = 1
    #첫 시작을 1로 하지 않고 0으로 두면
    #아래 반복문에서 첫 시작점 이후 지점에 대해서
    #다음으로 넘어갈 곳을 찾을 때 이 첫 시작점이 조건을 만족하는 것이 되어
    #다시 돌아가게 되는 상황이 생겨 무한 반복에 빠지게 된다.
    #그래서 임의적으로 1이라고 방문 여부를 표시하고 나중에 1을 빼도록 한다.

    dx = [0,0,1,-1]
    dy = [1,-1,0,0]

    while queue:
        node = queue.popleft()

        x = node[0]
        y = node[1]

        if(x == M-1 and y == N-1):
            print(visited[x][y]-1)
            #위에서 첫 시작을 0이 아닌 1로 시작하였으므로
            #최종값에 대해서는 1을 뺀 값으로 출력하도록 해야한다.
            return

        for i in range(0, 4):
            nx = x + dx[i]
            ny = y + dy[i]

            if(0 <= nx < M and 0 <= ny < N and visited[nx][ny] == 0):
                if(maze[nx][ny] == '0'):
                    #0인 지점이 1인 지점보다 벽뚫기를 하지 않으므로
                    #1인 지점보다 우선되어야 한다.
                    #그래서 appendleft를 적용한다.
                    queue.appendleft([nx, ny])
                    visited[nx][ny] = visited[x][y]
                    
                else:
                    queue.append([nx, ny])
                    visited[nx][ny] = visited[x][y]+1


N, M = map(int, input().split())
#N은 열을 M은 행을 의미한다.

maze = []
for _ in range(0, M):
    maze.append(list(input().rstrip()))
    #문자열을 list화 하려면 먼저 input에 대해 rstrip을 하여 "\n"을 제거하고
    #이를 list로 감싸서 문자 하나 하나가 배열의 원소가 되도록 한다.


bfs(0, 0)