from collections import deque
import sys
input = sys.stdin.readline

def bfs():
    #bfs로 찾기 때문에 사실상 모든 경우에 대해 찾아들어간다.
    #즉, 100번째 도달하기 전까지 모든 경우를 다 찾아 들어가고
    #그중에서 가장 적은 주사위 횟수는 visited를 통해 한번에 찾을 수 있다.
    while queue:
        start = queue.popleft()

        for i in range(1,7): #주사위는 1부터 6까지있다.
            next = start+i

            if(1 <= next < 101 and not visited[next]):
                for j in range(0, len(ladder)):
                    if (next == ladder[j][0]): #해당 지점에 사다리가 있으면 올라간다.
                        next = ladder[j][1]

                for k in range(0, len(snake)): #해당 지점에 뱀이 있으면 내려간다.
                    if (next == snake[k][0]):
                        next = snake[k][1]

                if(not visited[next]): #최종적으로 바뀐 지점에 대해 방문한 적이 없는 경우만 queue에 넣는다.
                    board[next] = board[start]+1
                    visited[next] = True
                    queue.append(next)


N, M = map(int, input().split())

ladder = []
snake = []
for i in range(0, N):
    ladder.append(list(map(int, input().split())))

for i in range(0, M):
    snake.append(list(map(int, input().split())))

ladder.sort() #ladder와 snake를 0번째 index를 기준으로 오름차순으로 정렬한다.
snake.sort()
#print(ladder, snake)

board = [0]*101 #각 지점에 도착할 때 굴린 총 주사위 횟수를 저장하는 배열이다.
visited = [False]*101 #최소로 1번에서 100번까지 가려면 방문했던 곳을 또 방문하면 안된다.

queue = deque()
queue.append(1)
visited[1] = False

bfs()
print(board[100])