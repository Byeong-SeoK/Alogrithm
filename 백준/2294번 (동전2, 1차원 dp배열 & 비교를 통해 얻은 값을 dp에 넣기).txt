import sys
input = sys.stdin.readline

N, K = map(int, input().split())
#N은 동전의 가지수, K는 만들려고 하는 값

coins = []
for _ in range(0, N):
    coins.append(int(input()))

coins = list(set(coins))
#같은 가치의 동전이 중복으로 존재할 수 있고 배열로 유지하고 싶으므로
#입력 값을 저장한 coin에 list(set())을 적용한다.

dp = [1e9]*(K+1)
#K원을 만들 수 있는 경우의 수 중 동전의 수가 가장 적은 것을 구해야하므로
#모든 값을 임의의 큰 값인 1e9로 초기화한다.

dp[0] = 1 #아무런 동전을 사용하지 않는 것이 1가지 경우라 간주한다.

for coin in coins: #동전 종류에 하나씩 접근한다.
    for value in range(1, K+1):
        if(value >= coin): 
            #만약 값어치가 동전의 가치보다 크면 해당 동전으로 그 값어치를 만들 수 있다.
            #이때 dp[value-coin]일 때의 개수에 coin을 1개 사용하는 것이므로
            #아래와 같이 dp[value-coin]+1을 한다.
            
            dp[value] = min(dp[value], dp[value-coin]+1)
            #동전을 최소로 사용하는 경우의 수를 구하는 것이므로
            #현재 알고 있는 동전의 개수와 새로이 알게된 동전의 개수를 비교하여
            #더 작은 것을 dp[value]안에 넣어야 한다.

if(dp[K] == 1e9):
    #dp[K]가 1e9이면 만들 수 없음을 의미한다.
    print(-1)
else:
    #우리가 위에서 임의로 지정한 값이 0일때 동전을 1개 사용하는 것이라 했다.
    #하지만 실질적으로는 1개도 사용하지 않은 것이므로 최종값에서 1을 빼야한다.
    print(dp[K]-1)