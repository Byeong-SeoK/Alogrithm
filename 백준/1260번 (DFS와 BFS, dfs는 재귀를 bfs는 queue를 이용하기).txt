from collections import deque

N, M, V = map(int, input().split()) #N은 정점의 개수, M은 간선의 개수, V는 탐색을 시작할 정점의 번호이다.

graph = [[] for _ in range(0, N+1)]
for i in range(0, M):
    node1, node2 = map(int, input().split())
    graph[node1].append(node2)
    graph[node2].append(node1)

dfs_visited = [0]*(N+1) #dfs로 정점을 방문하였는지 여부를 받는 배열
def dfs(start):
    dfs_visited[start] = 1
    print(start, end= " ")
    for node in sorted(graph[start]): #숫자가 더 작은 정점부터 방문해야하므로 sorted를 적용해야한다.
        if(dfs_visited[node] == 0):
            dfs(node)
    return


bfs_visited = [0] * (N+1) #bfs로 정점을 방문하였는지 여부를 받는 배열
def bfs(start):
    queue = deque([start]) #bfs로 방문할 정점을 받는 queue에 해당
    bfs_visited[start] = 1 #첫번째 정점은 방문을 하였으니 방문을 했다고 표시한다.

    while queue:
        node = queue.popleft() #제일 앞에 있는 정점을 뺀다.
        print(node, end= " ")

        for j in sorted(graph[node]): #방문한 정점에 연결된 정점을 bfs로 방문해야하므로 방문할 정점을 받는 queue에 저장한다.
            if(bfs_visited[j] == 0): #다만 방문한 정점은 넣을 필요가 없으므로 방문하지 않은 정점만 queue에 저장한다.
                queue.append(j)
                bfs_visited[j] = 1  # 방문을 하였으니 방문했다는 표시를 한다.

dfs(V)
print()
bfs(V)