K, N = map(int, input().split())
#K: 랜선의 개수, N: 내가 필요로한 랜선의 개수

line = [] #랜선을 받는 변수
for i in range(0, K):
    line.append(int(input()))

MIN = 1
#랜선을 1cm로 자르는 경우가 가장 최대 개수이다.
MAX = max(line)
#랜선을 가장 긴 길이로 자르는 것이 가장 최소 개수이다.
#왜냐하면 아무것도 자르지 못하게 되므로 K개가 된다.
mid = (MAX+MIN)//2 #MIN과 MAX 사이의 정가운데 길이로 자르는 경우

while MIN <= MAX:
    #랜선을 몇 cm로 자를지에 대해 그 cm를 이분 탐색하여 찾는다.
    #이때 조건을 최솟값이 최댓값을 넘지 않는 것으로 정한다.

    count = 0 #특정 cm로 랜선을 잘랐을 때 나오는 랜선의 총 개수
    for j in range(0, len(line)):
        count = count + (line[j]//mid)

    if(count >= N): 
        #너무 잘게 잘라서 총 랜선의 개수 >= 필요량
        #count == N은 없는데 count >= N은 있는 이유
        #180으로 11개를 만들었다하더라도 200으로 11개를 만들수 있으면
        #200으로 잘라야한다. 왜냐하면 최댓값을 구해야하므로.
        #그래서 count == N이더라도 MIN < MAX이면 아직 최대값에 도달하지 않은 것이다.
        #MIN == MAX일 때가 가장 최댓값이고 MIN이 MAX보다 커지는 시점이 while문을 탈출 시키는 시점이고
        #그때의 MAX값이 가장 최대 길이로 자른 것에 해당한다. MIN을 출력하면 MIN > MAX인 상황이므로
        #항상 원하는 출력 값보다 1이 더 큰 값이 출력된다.
        
        MIN = mid+1
        mid = (MAX+MIN)//2
    else: #너무 크게 잘라서 총 랜선의 개수 < 필요량
        MAX = mid-1
        mid = (MAX+MIN)//2
    """
    count == N인 경우를 삽입하면 예를 들어 210으로 랜선을 잘라야하는데
    210까지 못가고 190으로 잘랐을때 count == N인 곳에서 멈추게 되어
    올바르지 못한 값이 출력된다. 그래서 그러한 경우는 배제하고 로직을 짜야한다.
    """
print(MAX)