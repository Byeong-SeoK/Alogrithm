length = int(input()) #입력받는 배열의 길이
arr = list(map(int, input().split())) #입력받는 배열
left_dp = [0 for _ in range(length)] #특정 수 기준 왼쪽 라인의 바이토닉 수열
right_dp = [0 for _ in range(length)] #특정 수 기준 오른쪽 라인의 바이토닉 수열
bytonic = [0 for _ in range(length)] #각 지점에 대해 가장 긴 바이토닉 수를 받는 배열

"""
특정 수 N을 입력받았을 때 왼쪽 라인도 N보다 작은 수로 오름차순이어야하고
오른쪽 라인도 N보다 작은 수로 오름차순이어야 한다.
그러므로 특정 수 N을 기준으로 왼쪽에 대해 dp 배열을 만들고 오른쪽에 대해 dp배열을 만든다.
왜냐하면 양쪽 다 오름차순이므로 매번 해당 수보다 작은지 일일히 비교할 필요 없이
양쪽 각각에서 N 바로 이전의 숫자와 N과 비교한 다음 N 바로 이전의 수의 dp배열 값을
그대로 사용할 지 아니면 +1을 할 지 결정한다.
"""

for i in range(0, length): #입력받은 배열에 왼쪽에서부터 하나씩 접근한다. i가 특정 지점의 수의 배열 상의 위치에 해당한다.
    for j in range(0, i): #특정 지점을 기준으로 왼쪽에서 접근한다.
        if(arr[j] < arr[i] and left_dp[j] > left_dp[i]):
            #일단 바이토닉 수열을 만족하려면 비교하는 두 수 기준으로 왼쪽에 있는 수보다 오른쪽에 있는 수가 더 커야한다.
            #그리고 오른쪽에 있는 수의 바이토닉 수열의 길이는 항상 0이므로 왼쪽에 있는 수의 바이토닉 수열의 길이가 더 길다.
            #그러므로 오른쪽 바이토닉 수열의 길이 값에다가 일단 왼쪽에 있는 수의 바이토닉 수열의 길이 값을 할당한다.
            #이후 오른쪽에 있는 수를 포함하기 위해 이 for문 밖에다가 +1을 한다.

            left_dp[i] = left_dp[j]
    left_dp[i] = left_dp[i] + 1 #+1을 통해서 이전의 값의 바이토닉 수열의 길이에 자기 자신을 포함한 값이 된다.

for p in range(length-1, -1, -1): #입력받은 배열에 오른쪽에서부터 하나씩 접근한다.
    for q in range(length-1, p, -1): #특정 지점을 기준으로 오른쪽에서 접근한다.
        if(arr[p] > arr[q] and right_dp[p] < right_dp[q]):
            right_dp[p] = right_dp[q]
    right_dp[p] = right_dp[p] + 1


for k in range(0, length):
    bytonic[k] = left_dp[k] + right_dp[k] - 1 #특정 지점의 수가 길이 연산에서 2번 더해졌으므로 -1을 한다.

print(max(bytonic))