import sys
import heapq


def clear(heap):
    while (heap and not visited[heap[0][1]]):
        # 최소힙 내지 최대힙 안에 들어있는 값들 중에서
        # 2개의 힙 중에서 하나의 힙에서 이미 삭제 연산이 끝난 값들을 다 뺀다.
        # 이는 쓰레기값이므로 이후에 있을 삭제 연산에 영향을 줄 수 있기 때문에
        # 모든 쓰레기 값을 다 지워야 한다.
        heapq.heappop(heap)


TC = int(sys.stdin.readline())

while TC:
    opt = int(sys.stdin.readline())
    max_heap = []  # 최대 값을 쉽게 찾기 위한 최대힙
    min_heap = []  # 최소 값을 쉽게 찾기 위한 최소힙
    visited = [0]*opt
    # 이 visited라는 배열이 필요한 이유
    # 최소힙에서는 최소값이 최대힙에서는 최대값이 빠진다.
    # 즉, 최소힙에서는 최대값이 빠지지 않고 최대힙에서는 최소값이 빠지지 않은 상태로
    # 쓰레기 값으로 남게 된다. 이러한 쓰레기 값들이 이후 연산에 영향을 미치게 되므로
    # 이 값들을 빼줘야한다. 그러기 위해서는 이 값들이 지워졌는지 아닌지를 판단해야하는데
    # 이때 그 flag를 지정해주는 것이 배열의 역할이다. 즉, index값은 특정 숫자에 id를 부여한 것,
    # 그리고 value값은 그 값이 지워졌는지 여부를 나타내는 것이다.

    heapq.heapify(max_heap)  # heapify함수를 통해서 배열을 힙으로 바꾼다.
    heapq.heapify(min_heap)

    for key in range(0, opt):
        order, number = sys.stdin.readline().split()
        number = int(number)
        #print(visited)

        if (order == 'I'):
            heapq.heappush(max_heap, (-number, key))
            heapq.heappush(min_heap, (number, key))
            visited[key] = 1

        else:
            if (number == 1):
                clear(max_heap)
                # 삭제 연산을 진행하기 전에 쓰레기값을 버리고 시작해야한다.
                if (max_heap): #쓰레기값을 버리고 난 이후에 최대힙에 값이 있는 경우
                    visited[heapq.heappop(max_heap)[1]] = 0 #남아있는 값 중에서 가장 큰 값을 버린다.

            else:
                clear(min_heap)
                if (min_heap): #쓰레기값을 버리고 난 이후에 최소힙에 값이 있는 경우
                    visited[heapq.heappop(min_heap)[1]] = 0 #남아있는 값 중에서 가장 작은 값을 버린다.


    clear(min_heap)
    clear(max_heap)
    #위에서 연산을 다 끝내고 난 이후에 최대힙, 최소힙에 쓰레기값이 남아있을 수 있다.
    #왜냐하면 마지막 삭제 연산 이후에 별도의 clear연산을 하지 않았기 때문이다.
    #그러므로 최대힙 최소힙 내의 최대값 최소값을 찾는데에 영향을 줄 수 있다.
    #그리하여 최대값 최소값을 찾기 전에 clear연산을 하고 찾도록 한다.

    if (min_heap and max_heap):
        print(-max_heap[0][0], min_heap[0][0])
    else:
        print("EMPTY")

    TC = TC - 1
