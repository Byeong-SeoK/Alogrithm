N = int(input())
like = {}
for _ in range(N**2):
    lst = list(map(int, input().split()))
    like[lst[0]] = lst[1:]

room = [[0 for _ in range(N)] for _ in range(N)]
dxy = [(1,0),(-1,0),(0,1),(0,-1)]
#1차원 배열의 튜플로 dx, dy를 표현할 수 있다.
#위의 순서는 남북동서 이다.

for key in like:
    priority = [] #우선순위를 받는 배열이다.
    for x in range(N):
        for y in range(N):
            like_cnt, empty_cnt = 0, 0
            #like_cnt는 채워진 자리에 앉은 학생이 key번째 학생의 선호도에 들어가있는 학생인지 받는 변수이다.
            #empty_cnt는 비워져 있는 자리의 개수를 받는 변수이다.
            if not room[x][y]: #(x,y)에 해당하는 자리가 비워져있는 상황이다.
                for dx, dy in dxy:
                    nx, ny = x + dx, y + dy
                    if 0 <= nx < N and 0 <= ny < N:
                        if not room[nx][ny]: #인근 자리가 비워져있으면
                            empty_cnt += 1 #비워진 자리 변수에 값을 추가한다.
                        elif room[nx][ny] in like[key]: #인근에 앉은 학생이 선호하는 학생인 상황이다.
                            like_cnt += 1 #선호하는 학생 수를 받는 변수에 값을 추가한다.
                priority.append((like_cnt, empty_cnt, x, y)) #선호도 배열에 해당 값들을 튜플로 추가한다.
    priority.sort(key=lambda x:(-x[0],-x[1],x[2],x[3]))
    #람다 뒤에 조건을 여러개 붙이고 싶다면??
    # 정답 -> tmp.sort(key= lambda x:(-x[0], -x[1], x[2], x[3]))
    # 오름차순이 아닌 내림차순 정렬을 원한다면 값 앞에 -를 붙여주면 된다.
    # 위의 코드는 1번째, 2번째 인자는 내림차순으로, 3번째, 4번째 인자는 오름차순으로 정렬해줘! 하는 의미이다.
    # 이때 선호도는 내림차순으로 비어있는 자리도 내림차순으로 그리고 행과 열의 값은 오름차순으로 정렬한다.
    # 이렇게 정렬하는 이유는 선호도는 높을 수록 좋고 자리가 여러 개 있는 상황에서는 행과 열 값이 작을 수록 좋기 때문이다.
    # 즉, 저렇게 정렬하게 되면 선호도는 높은데 자리 번호는 작은 값이 0번째에 오게 된다.

    room[priority[0][2]][priority[0][3]] = key
    #위에서 정렬한 것에 의해 선호도가 높고 행과 열값이 작은 것이 각각 [0][2], [0][3]에 오게 된다.

answer = 0
for x in range(N): #아래 for문을 통해서 선호도의 합을 구한다.
    for y in range(N):
        like_cnt = 0
        for dx, dy in dxy:
            nx, ny = x + dx, y + dy
            if 0 <= nx < N and 0 <= ny < N:
                if room[nx][ny] in like[room[x][y]]:
                    like_cnt += 1
        if like_cnt:
            answer += 10**(like_cnt-1)
print(answer)