N, K = map(int, input().split())
# N은 N명의 사람을 의미하고 K는 K번째 사람을 빼는 것을 의미한다.
# 요세푸스 순열은 N이 어떤 값을 갖든 항상 K번째에 있는 사람을 뺀다.
# 그래서 만약에 (1,2)이고 K는 3인 경우 1 -> 2 -> 1 순서가 되어
# 1번째 사람이 원에서 빠지게 된다.

answer = [] #요세푸스 순열이 담기는 배열
circle = []  # 사람이 있는 원의 배열
for i in range(1, N + 1):
    circle.append(i)

repu = 1
# 반복문 반복 횟수 이 값이 K가 되면 그때의 사람을 원에서 뺀다.
# 이때 반복 횟수 스타트가 0이 아니라 1인 이유는 사람 번째수와 사람의 번호가 같기 때문이다.
# 즉 3번째 사람을 뺀다는 것은 반복횟수가 3일 때의 해당 사람을 빼야하는 것이기 때문에 스타트가 1이다.
index = 0
# 각 반복마다의 해당하는 사람의 번호 즉, 배열의 어떤 index의 값이 빠져야하는지 결정해주는 변수이다

while True:
    if(len(circle) == 1): #원에 사람이 한명만 있을 때는 더 이상 반복할 이유가 없다.
        answer.append(circle[0])
        break
    else:
        if (repu == K): #반복횟수와 K가 같아지면 사람을 한명 뺀다.
            repu = 1
            answer.append(circle[index])
            circle.pop(index)
        else:
            if (index > len(circle) - 1): 
                #index가 배열의 크기보다 커지는 경우가 있어서 따로 예외처리한다.
                #다만 이때 배열의 크기보다 반드시 딱 1이 더 큰 경우이므로
                #index를 0이 아니라 1로 처리해야한다.
                index = 1
                repu = repu + 1
            elif (index == len(circle) - 1):
                #index가 배열의 마지막 index값과 같은 경우에는 index를 맨앞으로 보내야한다.
                index = 0
                repu = repu + 1
            else:
                #index가 배열의 크기보다 작은 경우에는 단순히 더해주면 된다.
                index = index + 1
                repu = repu + 1

print('<', end="")
for j in range(0, len(answer)):
    print(answer[j], end="")
    if(j < len(answer)-1):
        print(",", end=" ")
    else:
        print('>')



======= 또다른 풀이 =======
- n명의 사람을 다 제거할 때까지 반복한다.

- 반복하면서 제거할 인덱스를 더해줘 제거할 인덱스의 위치를 바꿔준다.

- 인덱스의 크기가 남은 큐에 길이보다 크다면 인덱스의 크기를 나눠 나머지로 바꾼다.

- 큐에서 해당 인덱스를 제거하고 제거한 요소를 리스트에 추가한다.

import sys

n, k = map(int, sys.stdin.readline().split())

queue = [i for i in range(1, n + 1)]
temp = []
index = 0 # 제거할 인덱스

while queue:
    # 제거할 인덱스를 더해서 제거할 인덱스 위치를 바꾼다.
    index += k - 1

    # 인덱스의 크기가 남은 큐에 길이보다 크다면
    if index >= len(queue):
        # 인덱스의 크기를 나눠 나머지로 바꾼다.
        # 한바퀴 돌았기 때문
        index %= len(queue)

    # 큐에서 해당 인덱스를 제거하고 제거한 요소를 리스트에 추가한다.
    temp.append(str(queue.pop(index)))

# sep 함수를 통해 소괄호 공간을 없앤다.
print("<", ", ".join(temp), ">", sep="")


====== 또 다른 풀이 ======
n, k = map(int,input().split())
queue = [i for i in range(1,n+1)]

result = []
count = 0

for i in range(n):
    count += k-1
    if count >= len(queue):
        count = count%len(queue)
    result.append(str(queue.pop(count)))
print("<", ", ".join(result), ">", sep = '')


count가 queue의 index인 것에 주의해야 한다.

5명이 있다고 할 때 k=3 이라면, [1,2,3,4,5] 에서 결과는 <3,1,5,2,4> 가 될 것이다.

1) count = 0

2) count = 2 -> result : [3]

3) count = 4 -> count = count % len(queue) = 0  result : [3,1] // 3을 제외하고 [1,2,4,5] 에서 count[0] = 1

4) count = 2 -> result : [3,1,5] // 1을 제외하고 [2,4,5] 에서 count[2] = 5

5) count = 4 -> count = count % len(queue) = 0  result : [3,1,5,2] // 5를 제외하고 [2,4] 에서 count[0] = 2

6) count = 2 -> count = count % len(queue) = 0  result : [3,1,5,2,4] // 2를 제외하고 [4] 에서 count[0] = 4

 

- ''.join(리스트)
['a', 'b', 'c'] 이런 식의 리스트를 'abc'의 문자열로 합쳐서 반환해주는 함수

- '구분자'.join(리스트)
리스트의 값과 값 사이에 '구분자'에 들어온 구분자를 넣어서 하나의 문자열로 합쳐주는 함수
'_'.join(['a', 'b', 'c']) 같은 경우 "a_b_c" 와 같은 형태로 문자열을 만들어서 반환