import sys
from collections import Counter

n, m, inven = map(int, sys.stdin.readline().split())
#n은 땅의 세로 길이, m은 땅의 가로 길이, inven은 인벤에 있는 블록 수이다.

ground = []
for _ in range(n): ground += map(int, sys.stdin.readline().split())
#땅을 2차원 배열로 만든 것이 아니라 1차원 배열로 만들었다.
#즉 [0,0][0,1]이 되야할 것을 [0,0,0,1]로 만든 것이다.

height, time = 0, 1000000000000000
#height는 땅을 고르게할 높이를 time은 땅을 고르게 할 때 걸리는 시간이다.

min_h = min(ground) #제일 낮은 높이의 땅
max_h = max(ground) #제일 높은 높이의 땅
_sum = sum(ground) #모든 땅의 높이의 합이다.
ground = dict(Counter(ground))
#땅의 각 높이를 key로 두고 각 높이가 각각 몇 개씩인지 value로 받는다.

for i in range(min_h, max_h + 1):
    if _sum + inven >= i * n * m:
        #땅의 높이의 합과 인벤에 들어있는 블록의 합이
        #땅의 최소 높이*가로*세로 ~~~ 땅의 최대 높이*가로*세로보다
        #항상 크거나 같은 경우 땅을 메워서 높이를 높이는 것이 가능하다.
        #즉, 제일 낮은 높이를 기준으로 땅을 고르게 하는 것부터
        #제일 높은 높이를 기준으로 땅을 고르게 하는 것 까지
        #매 높이마다의 고르게 하는데 걸리는 시간 값을 구한다.

        cur_time = 0 #땅을 고르게하는데 걸리는 시간을 받는 변수
        for key in ground:
            #ground에는 현재 땅의 각 높이값이 들어있다. 그리고 i에는
            #최소 높이에서 최대 높이 범위의 값에 대해 하나씩 접근해 나간다.
            
            if key > i:
                #땅의 높이가 (최소 높이 ~ 최대 높이) 범위에서의 i번째 높이보다 높은 경우
                #땅의 높이 - i번째 높이만큼 블록을 뺀다. 그리고 ground[key]를 통해서
                #해당 땅의 높이를 갖는 모든 곳에 대해 블록을 빼고 그에 대한 시간 값을 계산한다.
                #즉, i번째 높이로 땅의 높이를 맞추기 위함이다.
                
                cur_time += (key - i) * ground[key] * 2
            elif key < i:
                #땅의 높이가 (최소 높이 ~ 최대 높이) 범위에서의 i번째 높이보다 낮은 경우
                #i번째 높이 - 땅의 높이만큼 블록을 채운다. 그리고 ground[key]를 통해서
                #해당 땅의 높이를 갖는 모든 곳에 대해서 블록을 채우고 그에 대한 시간 값을 계산한다.
                #즉, i번째 높이로 땅의 높이를 맞추기 위함이다.
                
                cur_time += (i - key) * ground[key]
        if cur_time <= time:
            #만약 time에 저장된 시간 값보다 i번째 높이로 땅의 높이를 맞추는 경우의 시간이 더 작은 경우
            #시간 값을 새로이 계산한 시간 값으로 바꾼다. 그리고 높이도 그에 맞게 i번째로 바꾼다.
            
            time = cur_time
            height = i

print(time, height)
