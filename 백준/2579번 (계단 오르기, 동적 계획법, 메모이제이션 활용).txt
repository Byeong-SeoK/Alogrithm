import sys
N = int(sys.stdin.readline())

stair = []
for i in range(0, N):
    #마지막 계단은 항상 밟는다. 즉, 마지막 계단을 첫지점이라 놓고 봤을 때
    #항상 처음 값은 알고 있는 것이 되므로 도착에서 출발로 거꾸로 올라가는 것으로 바꾼 다음
    #상향식 동적 계획법을 이용하여 푸는 것이 좋다.
    stair.append(int(sys.stdin.readline()))

if(N == 1):
    print(stair[0])
elif(N == 2):
    print(stair[0]+stair[1])
else:
    score = [0] * (N)  # 각 계단을 밟을 때 얻을 수 있는 점수의 합을 담은 배열
    score[0] = max(stair[0], 0)  # 첫번째는 반드시 밟는 경우, 혹은 안 밟는 경우이다.
    score[1] = max(stair[0] + stair[1], stair[1])  # 두번째는 첫번째를 밟고 온 경우, 한번에 온 경우 2가지이다.
    score[2] = max(stair[0] + stair[2], stair[1] + stair[2])
    # 세번째 경우에는 연속 3계단은 밟지 못한는 규칙을 적용해야하므로 첫번째 계단을 밟고 바로 온 경우
    # 첫번째는 건너뛰고 두번째 세번째를 차례를 밟고 온 경우 이렇게 2가지이다.

    for j in range(3, N):
        score[j] = max(score[j - 2] + stair[j], score[j - 3] + stair[j] + stair[j - 1])
        # 4번째 계단부터도 2가지 경우가 있는데 더 이상 stair 배열만으로는 불가능하고 score 배열도 같이 사용해야한다.
        # 1,2,3,4 로 계단이 있다고 하자 4번 계단으로 가는 방법은 1 -> 2 -> 4 / 1 -> 3 -> 4 이렇게 2가지이다.
        # 즉 두칸을 넘어온 경우에는 메모이제이션 배열에서 2번째 까지 가는 경우(score[2] + stair[4])를 하면 되지만,
        # 한칸을 넘어온 경우에는 메모이제이션 배열에서 1번째 까지 가는 경우(score[1])에 stair[4]와 stair[3]을
        # 더해야한다. 즉, 한칸을 넘어온 경우에는 항상 이전 값에 해당하는 것도 score이 아닌 stair에서 찾아야한다.

    print(score[N-1])
