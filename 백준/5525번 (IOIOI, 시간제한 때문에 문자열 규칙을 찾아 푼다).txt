type = int(input()) #IOI~~~ 타입을 받는 변수
length = int(input()) #S의 길이를 받는 변수
S = input() #실제 S를 받는 변수

#type은 해당 Pn에 IOI가 몇 개가 들어있는지 받는 변수라고도 볼 수 있다.
#그러므로 type이 1이면 Pn에 IOI가 1개 type이 2이면 Pn에 IOIOI여서 2개가 들어간다.
#이를 이용하여 S에 IOI가 몇 개가 있는지 찾고 그 중에서 type을 만족하는 것만 찾는다.

index = 0 #S의 index에 해당하는 변수
count = 0 #S에 IOI의 총 개수를 받는 변수
answer = 0 #count에서 IOI~~~가 연속되어 실제로 type을 만족하는 것의 개수를 받는 변수

while(index < length-2):
    if(S[index:index+3] == "IOI"):
        count = count+1
        index = index+2
        #index번쨰 접근하였을 때 그 index번 뒤의 2개는 위의 분기문에서 비교하므로
        #+1을 할 필요 없이 바로 2번째 뒤인 즉, index+2번째 부터 접근하여 다시 +2까지와 비교한다.

        if(count == type):
            answer = answer + 1
            count = count - 1
            #count값을 하나 빼는 이유는 예를들어 IOIOIOI이고 IOIOI의 개수를 찾는 경우
            #앞부분 IOIOI와 뒷부분 IOIOI로 총 2개가 되어야 하는데 이때 만약에 하나를 빼지 않고
            #바로 count를 0으로 만들면 위의 index = index+2 때문에 뒷부분 IOIOI에서 바로
            #(IO)IOI {()는 넘어간 부분} 가 되어서 뒷부분 IOIOI를 count할 수 없게 된다.

    else:
        #IOI를 만족하지 못한 경우에는 +2가 아니라 바로 뒤에 접근한다.
        #IIOI와 같은 경우 IIO이후가 다시 IOI를 만족하는 경우이기 때문이다.
        count = 0
        index = index+1

print(answer)