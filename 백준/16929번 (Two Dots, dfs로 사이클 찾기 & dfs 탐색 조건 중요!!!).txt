from collections import deque
import sys
input = sys.stdin.readline

def dfs(x, y, prevx, prevy, count):

    if(visited[x][y] and count >= 4):
        #그래프 내에 싸이클이 존재하려면 2차원 배열에서는
        #최소 4개의 정점이 같은 값을 가지고 있어야 한다.
        #그렇기 때문에 count가 같은 값을 가지고 있는 정점의 개수를 세서
        #4보다 큰 경우 싸이클이 존재하는 하나의 단서로 동작하게 한다.
        #근데 일렬로 4개가 있는 경우에는 싸이클이 되지 못한다.
        #그러므로 단순히 4개가 모두 값이 같은 경우 뿐만 아니라
        #visited의 값도 방문한 것으로 해야지만 싸이클이 형성될 수 있다.
        #그래서 and로 visited와 count를 연결하는 것이다.

        result.append(1)
        return

    visited[x][y] = True

    for i in range(0, 4):
        nx = x + dx[i]
        ny = y + dy[i]

        if (0 <= nx < N and 0 <= ny < M
                and dots[x][y] == dots[nx][ny]):
            #당연히 nx, ny는 범위 내에 존재하여야하고
            #현재의 값과 이후 탐색할 것의 값이 같아야
            #싸이클을 이룰 수 있기 때문에 값을 비교한다.

            if [nx, ny] != [prevx, prevy]:
                #[nx, ny] != [prevx, prevy]는 두 리스트 내의
                #요소가 하나라도 다른 경우 True를 반환하는 반면,
                #nx != prevx and ny != prevy는
                #두 변수 nx와 prevx, 그리고 ny와 prevy가
                #동시에 서로 다를 때 True를 반환합니다.
                #즉 nx != prevx and ny != prevy에서
                #앞에 것도 False 뒤에 것도 False이면
                #False == False가 되어 True가 반환된다.
                #그래서 원하는 값이 나오지 못한다.
                #반면에 [] != []로 하면 배열 각 요소를 비교하여
                #하나라도 다르면 무조건 False로 반환하게 된다.

                #싸이클을 이루기 위해서는 반드시 마지막과 처음 값이 같고
                #마지막에서 처음으로 이어져야 한다. 즉, 현재 지점 뿐만 아니라
                #기존에 방문했던 지점에 대해서도 값을 비교해야한다.
                #그래서 dfs탐색 조건을 방문 여부로 두는 것이 아니라
                #다음에 탐색할 값의 위치가 이전에 탐색한 값의 위치가 다를 때만
                #지속적으로 탐색하도록 한다. 즉, 만약 dots[x][y] == dots[nx][ny]인데
                #이때 nx, ny가 이전에 방문하였던(탐색 시작점인 경우) 곳이라면
                #더이상 dfs를 탐색하지 않고 싸이클임으로 판명하면 된다.

                dfs(nx, ny, x, y, count + 1)



N, M = map(int, input().split())
#N은 행의 값, M은 열의 값을 의미한다.

dots = []
for _ in range(0, N):
    dots.append(list(input().rstrip()))


visited = [[False for _ in range(0, M)] for _ in range(0, N)]
#방문 여부를 받는 배열, 다만 싸이클을 찾을 때는 방문여부가 탐색 조건이 되는 것이 아니라
#지속적으로 탐색을 하되 값이 같은 곳을 다시 방문하려할 때 탐색을 멈추도록 해야한다.

dx = [0,0,1,-1]
dy = [1,-1,0,0]
#dx, dy 배열을 dfs함수 내부가 아닌 외부에 선언한 이유
#만약 dx, dy 배열을 dfs함수 내부에 선언하면
#매 dx, dy 배열이 호출될 때마다 메모리에 할당되어
#너무 많은 메모리 공간을 낭비하게 된다.
#그래서 외부에 선언한 것이다.

result = []
#이 배열은 해당 그래프 내에 싸이클이 있는지 여부를 받는 배열로
#이 배열의 길이가 0이면 싸이클이 없는 것을 의미하고
#이 배열의 길이가 1이상 이면 그래프 내에 싸이클이 있다는 것이다.

for i in range(0, N):
    for j in range(0, M):
        if(not visited[i][j]):
            dfs(i, j, i, j, 0)

if(result):
    print("Yes")
else:
    print("No")