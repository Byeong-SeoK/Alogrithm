import sys

case = int(sys.stdin.readline())
number = list(map(int, sys.stdin.readline().split()))

SUM = [number[0]] 
#number 배열에서 각 범위의 요소들의 합을 저장하는 배열이다.
#이때 dp로 풀기 위해서 number[0]의 값을 미리 SUM배열에 넣는다.
#그리고 dp로 풀기 위해 이후의 SUM에 들어갈 수 있는 값들과 비교한다.
#여기서는 SUM[i]+number[i+1], number[i+1]
#첫번째는 이미 연속합에 바로 연속적인 숫자 하나를 더 더하는 경우이고
#두번째는 아예 다음 숫자부터 새로이 연속합을 시작하는 경우이다.
#이때, SUM[i]는 비교 대상에 넣으면 안되는데 만약에 SUM[i]도
#비교 대상에 넣으면 상황에 따라서는 SUM[i]가 위 2개보다 더 큰 경우가 생긴다.
#그렇게 되면 예를 들어 number = [2,3,-1,3]에서 
#SUM[i] = [2,3] -> 5이고 SUM[i]+number[i+1] = [2,3,-1] -> 4
#number[i+1] = [-1] -> -1이 된다. 이렇게 되면 SUM[i]가 가장 큰 데
#이때 SUM[i]를 다시 SUM에 집어넣고 진행하면 다음 i가 접근하는 상황에서
#SUM[i] + number[i+1] = [2,3,5] -> 10이 되어 연속합을 만족하지 못하게 된다.
#그러므로 SUM[i]는 비교대상에 넣으면 안된다.
#이렇게 2가지 경우를 비교해서 어떤 경우의 값이 제일 큰 지 구하고
#해당 값을 SUM에 넣도록 한다.

for i in range(0, len(number)-1):
    SUM.append(max(SUM[i]+number[i+1], number[i+1]))

print(max(SUM))