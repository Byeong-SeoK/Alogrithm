def findGCD(a, b):
    num = b
    div = a
    rest = num % div
    while rest != 0:
        num = div
        div = rest
        rest = num % div
    return div

N = int(input())

num = []

"""
TC1: 6 34 38 --> 28, 32, 4
TC2: 5 14 17 23 83 --> 9 12 18 78 3 9 69 6 66 60
--> 배열의 모든 값을 각각 뺀 것에 대한 최대 공약수를 구하는 문제
"""

for i in range(0, N):
    num.append(int(input()))

num.sort()
#입력받은 배열을 오름차순으로 정렬

diff = []

for j in range(0, len(num)-1):
    diff.append(num[j+1]-num[j]) #for문을 하나 줄이기 위해 이와  같이 작성

diff.sort()
#최대 공약수를 찾기 위해 diff를 오름차순으로 정렬

gcd = set() #최대 공약수를 받는 집합
find = False

GCD = diff[0] #최대 공약수를 받는 변수
for m in range(1, len(diff)): #유클리드 호제법을 이용하여 최대 공약수를 구한다.
    GCD = findGCD(GCD, diff[m])

for n in range(2, int(GCD**0.5)+1): #최대공약수의 약수들을 모두 찾는다.
    if(GCD % n == 0): #여기서 n과 GCD//n이 같은 값이 될 수 있으므로 set을 통해서 중복을 제거한다.
        gcd.add(n)
        gcd.add(GCD//n)
gcd.add(GCD) #최대 공약수가 가장 큰 값에 해당하므로 최대공약수의 약수를 다 찾은 다음에 배열에 넣는다.
print(*sorted(gcd)) #집합을 오름차순으로 정렬한다.
# *란, 배열을 [2, 4, 8] 형태가 아닌 요소들만 2 4 8 이렇게 출력하게 해주는 것으로 asterlisk라고 한다.