def count_safe_zone():
    count = 0 #안전지대를 세는 변수

    for i in range(0, N):
        for j in range(0, M):
            if(data[i][j] == 0):
                count = count+1

    return count


def virus(x, y):
    for i in range(0, 4):
        nx = x + dx[i]
        ny = y + dy[i]
        #동서남북으로 하나씩 확장시켜본다.

        if(0 <= nx < N and 0 <= ny < M): #index out of range를 피하기 위한 조건
            if (data[nx][ny] == 0):  # 해당 위치에 벽이 없는 경우
                data[nx][ny] = 2  # 바이러스를 퍼뜨린다.
                virus(nx, ny)  # 바뀐 위치에서 새롭게 퍼뜨리는 것이 가능한지 재귀로 호출한다.

    return


def dfs(wall):
    global safety_zone

    if(wall == 3): #탐색의 한계에 도달한 상황
        for p in range(0, N):
            for q in range(0, M):
                data[p][q] = center[p][q]
        #위와 같이 center의 값을 data로 옮기는 이유는
        #center 배열에 시뮬레이션을 통해 바이러스를 전파시키고 난 이후
        #다시 center 배열을 원상 복귀할 방법이 없다. 벽은 dfs를 통해서 원상복귀가 가능하다.
        #하지만 data배열을 만들고 center배열의 값을 옮겨놓고 data배열을 이용하여 바이러스를 전파하면
        #나중에 다시 center값을 data로 옮길 때 바이러스가 전파된 것이 초기화 된다.

        for a in range(0, N):
            for b in range(0, M):
                if(data[a][b] == 2): #해당 칸에 바이러스가 있다면
                    virus(a, b) #이 바이러스가 벽을 만나기전까지 퍼뜨린다.

        temp = count_safe_zone()

        if(safety_zone < temp): #탐색시점의 안전지대가 이전의 안전지대 보다 더 넓은 상황
            safety_zone = temp

        return

    else:
        for i in range(0, N):
            for j in range(0, M):
                if(center[i][j] == 1): #해당 칸이 벽인 경우
                    continue
                elif(center[i][j] == 2): #해당 칸에 바이러스가 있는 경우
                    continue
                else:
                    center[i][j] = 1
                    dfs(wall+1)
                    center[i][j] = 0


dx = [0, 1, 0, -1]
dy = [1, 0, -1, 0]
# dx, dy는 시뮬레이션 알고리즘에서 자주 사용하는 기법으로
# dx[0]+dy[0]을 통해 좌표에서 +x 방향으로 확장해나가는 것을 표현하고
# dx[1]+dy[1]을 통해 좌표에서 +y 방향으로 확장해나가는 것을 표현하고
# dx[2]+dy[2]을 통해 좌표에서 -x 방향으로 확장해나가는 것을 표현하고
# dx[3]+dy[3]을 통해 좌표에서 -y 방향으로 확쟁해나가는 것을 표현한다.
# 여기서 dx, dy 배열은 바이러스 확장하는 것에 사용된다.

N, M = map(int, input().split())
#N,M은 연구소의 가로 세로를 의미한다.

center = [] #연구소내의 빈칸, 벽, 바이러스 상태를 받는 배열이다.
for _ in range(0, N):
    temp = list(map(int, input().split()))
    center.append(temp)

data = [[0]*M for _ in range(0, N)] #벽을 세우고 바이러스를 퍼뜨리는 등 계속 수정이 필요한데 center 배열을 수정해버리면 이전으로 돌아갈 수 없게 된다.
#그러므로 center의 복사본을 만들어서 이 배열을 수정하고 탐색하도록 한다.
#다만 이때 data = center[:]로 해버리면 center가 변할 때 data도 같이 변하게 되므로 위와 같은 방식으로 초기화해야한다.
#[[0]*M]*N으로 하면 [0]*M의 배열이 N번 복사되어 만들어진 2차원 배열이 되므로 2차원 배열 data[0][0]의 값이 변해도
#data[0][0~N]의 모든 값이 같이 변경된다. 이는 [:]나 *로 만들어지는 배열은 얕은 복사로 만들어지는 것이기 때문이다.
#그러므로 아예 for문을 사용하여 완전히 새롭게 생성하거나 copy 모듈을 사용하여 깊은 복사를 하도록 해야한다.

wall = 0 #세울 수 있는 벽의 총 개수는 3개이다. -> 탐색의 한계점을 의미한다.
safety_zone = 0 #최종 안전지대의 크기를 받는 변수

dfs(wall)

print(safety_zone)