import sys
input = sys.stdin.readline

TC = int(input())

while TC:
    N = int(input()) #동전의 가지수
    coin = list(map(int, input().split()))
    coin.insert(0, 0)
    #아래 dp배열이 0을 포함한 2차원 배열이므로 coin에도 0인 값을 추가해줘야한다.
    #왜냐하면 dp배열의 행이 동전의 가지수를 의미하는데 이때 0이 포함된다.
    #그러므로 coin배열에도 이 0인 값을 추가하여 탐색에 있어서 오류가 발생하지 않도록 한다.

    #print(coin)

    M = int(input()) #만들어야할 금액

    dp = [[0 for _ in range(0, M+1)] for _ in range(0, N+1)]
    #dp배열은 금액이 열이고 동전의 가지수가 행인 2차원 배열이다.

    for i in range(0, N+1):
        #먼저 값이 0일 때 만들 수 있는 경우의 수는 항상 1이다.
        #이는 예를 들어 가치가 2인 동전으로 0을 만들 때
        #2인 동전을 0개를 사용하여 가치를 0으로 만드는 것과 같다.
        dp[i][0] = 1

    #print(dp)

    for j in range(1, N+1):
        for k in range(1, M+1):
            dp[j][k] = dp[j-1][k]
            #먼저 이전 행의 값을 그대로 집어넣는다.
            #왜냐하면 이전 행에는 이전에 사용하는 동전들까지를 이용하여
            #해당 가치를 만들 수 있는 모든 경우를 다 담고 있기 때문이다.
            #이 이전 값에다가 현재의 동전으로 만드는 경우를 추가하면 된다.

            if(k-coin[j] >= 0):
                #만약 현재 만들려고 하는 가치가 사용하려는 동전의 가치보다 클 경우
                #k-coin[j]에 위치한 경우의 수를 현재의 경우의 수에 추가한다.
                #이때 k-coin[j]를 찾아가는 이유는 k = k-coin[j] + coin[j]이기 때문에
                #coin[j] 동전을 사용할 때 k-coin[j] 일 때 경우의 수를 이용할 수 있고
                #그 경우의 수 만큼 현재의 경우의 수에 추가되는 것이다.
                dp[j][k] = dp[j][k] + dp[j][k-coin[j]]

    print(dp[N][M])

    TC = TC - 1