def check(x):
    if(x == 0):
        return True
    else:
        for i in range(0, x):
            if(chess[x] == chess[i]): #같은 열에 퀸을 위치하면 안된다.
                return False
            elif(abs(chess[x] - chess[i]) == x-i): 
                #행 값 간의 차이와 열 값 간의 차이가 같다는 것은 대각선으로 존재한다는 것을 의미한다.
                #또한 x-i는 x 파라미터로 받은 행의 위치에서 퀸이 위치할 수 있는 남은 자리를 의미하기도 한다.
                #즉, 남은 위치에서 조건을 만족하는 경우 퀸을 둘 수 없는 자리이므로 False를 return한다.
                return False

        return True

def dfs(x):
    global count

    if(x == N): #퀸 배치가 끝까지 도달했을 때 (즉, 완벽하게 배치가 가능할 때)
        count = count + 1
    else:
        for i in range(0, N):
            chess[x] = i
            avail = check(x) #해당 칸에 퀸을 두어도 되는지 받는 변수
            if(avail): #해당 칸에 퀸을 두어도 되면 dfs로 더 깊게 들어간다.
                dfs(x+1)

N = int(input())
chess = [0 for _ in range(0, N)] 
#이 배열의 index는 체스판의 각 행에 해당하고 배열에 들어가는 값은 체스판의 열에 해당한다.
#이렇게 1차원 배열만으로 가능한 이유는 한 행에 퀸을 한 군데(열)에만 둘 수 있기 때문이다.

count = 0
dfs(0)

print(count)