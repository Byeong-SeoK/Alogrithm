import sys
input = sys.stdin.readline

C, N = map(int, input().split())
#C는 유치하려는 고객의 수, N은 도시의 수이다.

cost = [0] #해당 도시에 홍보를 하는데 드는 비용
people = [0] #해당 도시를 통해 얻는 고객 수를 받는 배열
for _ in range(0, N):
    c, p = map(int, input().split())

    cost.append(c)
    people.append(p)

city = [[1e9 for _ in range(C+1)] for _ in range(0, N+1)]
#city는 행이 해당 도시에서 얻을 수 있는 사람의 수가 index이고
#열은 사람의 수가 0부터 C까지 index인 총 C+1 길이이다.
#그래서 행열 모두 사람과 관련된 정보로 이루어진 2차원 배열이다.
#이때 [N+1][C+1]에 최소값이 담겨있고 최소값을 구하는 것이므로 1e9로 초기화한다.


for i in range(1, N+1):
    for j in range(1, C+1):
        city[i][j] = city[i-1][j]
        #일단 현재의 값은 이전의 값이랑 같다고 한다.
        #왜냐하면 1e9로 되어있던 것을 새로이 계산된 값으로 바꾸기 위함이다.

        k = 0 #배수 계산을 위한 변수

        while True:
            if(j-(people[i]*k) <= 0):
                #만약 현재 사람의 수가 홍보를 통해 얻을 수 있는 고객의 수의 배수일 때
                #그때는 [i][j]와 cost[i]*k와 비교하여 더 작은 값을 넣는다.
                #그리고 더 이상 탐색하지 않고 탈출한다.
                #왜냐하면 사람의 숫자가 배수의 값보다 작기 때문에
                #더 많은 사람이 있는 경우를 탐색해야하기 때문이다.

                city[i][j] = min(city[i][j], cost[i]*k)
                break

            else:
                #이 경우는 j-k*people[i]인 지점의 cost값에 cost[i]를 더한 값과
                #현재 알고 있는 [i][j]의 cost값을 비교하여 더 작은 값을 넣도록 한다.
                city[i][j] = min(city[i][j], city[i-1][j-k*people[i]]+cost[i]*k)

            k = k+1


print(city[N][C])
