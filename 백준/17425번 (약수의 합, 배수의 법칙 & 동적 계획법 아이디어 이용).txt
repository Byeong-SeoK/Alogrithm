import math
import sys
input = sys.stdin.readline
MAX = 1000000
TC = int(input())

dp = [1]*(MAX+1) #각 index는 N이 index일 때 그 약수의 합을 저장하는 배열이다.
accumulate = [0]*(MAX+1)
#각 index는 N이 index일 때 해당 index까지의 모든 약수 합의 누적합을 저장하는 배열이다.

accumulate[1] = 1 #약수의 누적합에서 1일 때의 누적합은 1이다.

for i in range(2, MAX+1):
    #이 for문은 accumulate 배열을 갱신하는 반복문이다.
    #누적합의 1인 부분은 위에서 초기화했으므로 2부터 MAX 지점까지 갱신하도록 한다.
    for j in range(1, (MAX//i)+1):
        #이 for문은 dp 배열을 갱신하는 반복문이다.
        #이때 dp는 해당 숫자의 약수의 합을 가지고 있는 배열이므로
        #i에 j를 곱해서 i의 배수에 해당하는 모든 숫자에 i를 더한 값을 저장하도록 한다.
        #왜냐하면 i의 배수 모든 숫자들은 i를 약수로 가지고 있기 때문이다.
        dp[j*i] = dp[j*i] + i

    accumulate[i] = accumulate[i-1] + dp[i]
    #각 i번째 수에 대해 약수 합의 누적 합을 구할 때 1부터 i까지 각각의 약수합을
    #모두 다 더해서 그 합을 accumulate[i]에 저장하는 것이므로 
    #dp[i]를 통해 i의 약수의 합과 accumulate[i-1]을 통해 i-1까지의 누적합을 더해
    #최종적인 약수합의 누적합을 구해서 그것을 accumulate[i]에 더한다.
    #이는 마치 동적 계획법의 접근 방식과 아이디어와 비슷하다.

while TC:
    N = int(input())

    print(accumulate[N])

    TC = TC-1