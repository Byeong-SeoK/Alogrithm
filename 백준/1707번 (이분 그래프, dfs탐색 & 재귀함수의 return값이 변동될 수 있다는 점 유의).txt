from collections import deque
import sys
input = sys.stdin.readline

TC = int(input())

def dfs(start, group):
    visited[start] = group
    #처음 탐색을 시작하는 정점을 하나의 그룹으로 분류한다.

    for next in edge[start]:
        if(not visited[next]):
            # 만약 next 정점이 아직 탐색하지 않은 것이면 dfs로 탐색하도록 한다.

            find = dfs(next, -group)
            #dfs의 return값을 find 지역 변수에 담는다.
            #이 과정이 필요한 이유는 dfs 특성 상
            #재귀함수를 호출하기 때문에 현재의 값이 False여도
            #이전 재귀함수의 return값이 True여서
            #최종적인 return값이 True가 될 수 있다.
            #그래서 아래의 if문을 통해서 한번 False이면 계속 False를 return하도록 한다.

           if(not find):
               return False

        elif(visited[next] == visited[start]):
            #만약 인접 정점과 시작 정점이 같은 그룹으로 분류되면
            #더 이상 이분 그래프로 볼 수 없으므로
            #더 이상 탐색을 하지 않고 False를 반환한다.
            return False

    return True



while TC:
    V, E = map(int, input().split())
    #V는 정점, E는 간선을 의미한다.

    edge = [[] for _ in range(0, V+1)] #간선 정보를 받는 배열이다.
    for _ in range(0, E):
        start, end = map(int, input().split())
        edge[start].append(end)
        edge[end].append(start)
        #무방향성 그래프이므로 start와 end 모두에 그 간선 정보를 저장한다.

    #print(edge)

    find = True #이분 그래프인지 받는 변수
    visited = [False]*(V+1)
    #방문 여부와 인접한 노드가 서로 다른 그룹인지 받는 배열

    #이분 그래프란
    #서로 인접한 노드가 서로 다른 그룹으로 묶을 수 있는 그래프를 의미한다.
    #즉, 그래프의 각 노드를 빨간색과 파란색으로 칠할 때
    #인접한 노드는 서로 다른 색깔로 칠해야하고
    #그래프의 모든 노드에 대해서 이를 적용할 수 있는 그래프를 의미한다.
    #그렇기 때문에 그래프의 노드를 빨간색이 칠해진 노드의 그룹
    #파란색이 칠해진 노드의 그룹으로 분리할 수 있어야 한다.
    #이를 1과 -1로 방문여부에 표기하여 그룹으로 분리할 수 있는지 찾으면 된다.

    for i in range(1, V+1):
        if(not visited[i]):
            #visited배열은 전역 배열이므로
            #start에 해당하는 정점에서 최대한 다 탐색한 다음
            #visited가 업데이트 된 상태에서
            #다른 정점 중에서 start 정점에서 탐색할 수 없는
            #정점만 이어서 탐색하도록 한다.
            #이렇게 함으로써 bfs탐색 횟수를 줄일 수 있다.

            find = dfs(i, 1)

            if (not find):
                break

    if(find): #해당 그래프가 이분 그래프인 경우
        print("YES")
    else: #해당 그래프가 이분 그래프가 아닌 경우
        print("NO")

    TC = TC - 1