import heapq
import sys
input = sys.stdin.readline

def dijkstra(node):
    heap = []
    heapq.heappush(heap, [0, node])
    #비용을 기준으로 최소힙이 되도록 하기 위해 [비용, 도착점]으로 넣는다.

    visited[node] = 0 #첫번째 헛간까지 가는데 드는 비용은 0이다.

    while heap:
        before_cost, start = heapq.heappop(heap)

        if(visited[start] < before_cost):
            #만약 이전에 구한 현재 위치까지 비용이 탐색을 통해 새로이 현재 위치까지 가는 비용보다 작은 경우 건너뛴다.
            #왜냐하면 이전에 알고 있던 현재 위치까지 가는 비용이 새로이 알게 된 현재 위치까지 가는 비용보다 저렴하기 때문이다.
            #이 분기문을 통해서 무방향성 그래프 상황에서 다음 지점이 이전 지점을 방문하는 즉, 다시 돌아가는 상황을 배제할 수 있다.
            #왜냐하면 다음 지점에서 이전 지점으로 돌아가려할 때 드는 비용이 중복으로 비용이 들어 더 비싸기 때문이다.
            continue
        else:
            for current_cost, end in road[start]:
                next_cost = current_cost + before_cost
                #현재 위치에서 다음 위치까지 드는 비용은
                #현재 위치까지 들었던 비용 + 다음 위치로 갈 때 드는 비용이다.

                if(visited[end] > next_cost):
                    #만약 이전에 알고 있던 도착지점까지의 비용이 새로이 구한 비용보다 큰 경우에만 갱신한다.
                    heapq.heappush(heap, [next_cost, end])
                    visited[end] = next_cost



N, M = map(int, input().split()) #헛간과 소들의 길 개수

road = [[] for _ in range(0, N+1)]
for _ in range(0, M):
    start, end, cow = map(int, input().split())

    road[start].append([cow, end])
    road[end].append([cow, start])
    #cow를 출발 or 도착 헛간 보다 먼저 들어가는 이유
    #heap은 최소힙으로 자동으로 정렬해주는데 이때 2차원 배열이 heap이라면
    #2차원 배열 안의 1차원 배열의 첫번째 원소를 기반으로 최소힙으로 정렬한다.
    #문제에서 최소 비용으로 도착하는 것을 찾으려고 하기 때문에
    #비용에 해당하는 cow가 출발 or 도착 헛간보다 먼저 들어가야 한다.

#print(road)

visited = [1e9]*(N+1) #각 헛간을 방문할 떄 드는 최소 여물의 수를 받는 배열

dijkstra(1)

print(visited[N])