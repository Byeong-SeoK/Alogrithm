dp =  [[[0 for _ in range(21)] for _ in range(21)] for _ in range(21)]
#dp라는 배열은 재귀함수의 결과 값을 저장하여 계속 재귀를 돌리지 않고 해당 값이
#배열에 존재하는 경우 더 이상 재귀하지 않고 그 값을 받아서 사용할 수 있도록 하는 배열이다.
#즉, 메모이제이션을 하기 위한 배열이다.

def w(a, b, c):
    if(a <= 0 or b <= 0 or c <= 0):
        return 1
    elif(a > 20 or b > 20 or c > 20):
        return w(20, 20, 20)
    else:
        if(dp[a][b][c]): #a,b,c의 위치에 값이 존재하는 경우
            return dp[a][b][c]
            #더 이상 재귀를 돌리지 않고 배열에 저장된 값을 이용한다.
        else:
            if(a < b and b < c):
                dp[a][b][c] = w(a, b, c-1) + w(a, b-1, c-1) - w(a, b-1, c)
                return dp[a][b][c]
            else:
                dp[a][b][c] = w(a-1, b, c) + w(a-1, b-1, c) + w(a-1, b, c-1) - w(a-1, b-1, c-1)
                return dp[a][b][c]
        
    
while True:
    a, b, c = map(int, input().split())
    
    if(a == -1 and b == -1 and  c == -1):
        break
    else:
        print("w(%d, %d, %d) = %d"%(a, b, c, w(a,b,c)))