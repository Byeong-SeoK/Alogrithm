def dfs(depth, total, plus, minus, mult, div):
    #dfs 함수가 받는 파라미터는 앞에서 부터 순서대로
    #탐색 깊이, 연산 결과, +, -, *, / 순이다.

    global min_result, max_result

    if(depth == N):
        min_result = min(total, min_result)
        max_result = max(total, max_result)
        return

    if(plus > 0):
        dfs(depth+1, total+number[depth], plus - 1, minus, mult, div)

        #아래와 같이 미리 plus 값을 빼고 아래 dfs에서 plus로 파라미터를 넣는다면
        #재귀함수로 호출을 진행하다가 다시 돌아왔을 때 plus(뿐만 아니라 minus, mult, div와 같은 연산자들)이
        #복원되지 못한다. 이는 위의 plus = plus-1에 의해 이미 해당 호출 메모리단에서 plus 값이 변동되었기 때문에 그렇다.
        #그러므로 돌아왔을 때 다시 plus = 0에서 plus = 1 이렇게 복원이 되려면 해당 연산을 따로 빼는 것이 아니라
        #dfs 재귀함수의 파라미터 단에서 연산을 진행해야된다. 그러면 돌아왔을 때 복원이 된다.
        #즉, 재귀함수를 사용하는 문제에서 복원시켜야하는 값이 있다면 파라미터에서 해당 값을 변동하도록 구현해야한다.

        # plus = plus - 1
        # dfs(depth+1, total+number[depth], plus, minus, mult, div)

    if(minus > 0):
        dfs(depth+1, total-number[depth], plus, minus - 1, mult, div)

        # minus = minus - 1
        # dfs(depth+1, total+number[depth], plus, minus, mult, div)

    if(mult > 0):
        dfs(depth+1, total+number[depth], plus, minus, mult, div)

        # mult = mult - 1
        # dfs(depth+1, total*number[depth], plus, minus, mult - 1, div)

    if(div > 0):
        dfs(depth+1, int(total/number[depth]), plus, minus, mult, div - 1)

        # div = div - 1
        # dfs(depth+1, total+number[depth], plus, minus, mult, div)


N = int(input()) #총 숫자의 개수
number = list(map(int, input().split())) #N개의 숫자
operator = list(map(int, input().split())) #+, -, *, / 순으로 입력을 받는다.
#operator 배열의 0번째는 +, operator 배열의 1번째는 -, operator 배열의 2번째는 *, operator 배열의 3번째 / 이다.
#즉, 배열의 index로 연산자를 구분하도록 한다.

global min_result, max_result
min_result = 1e9 #임의의 엄청 큰 수로 초기화하여 어떤 값이 나오든 이보다는 항상 작도록 한다.
max_result = -1e9 #임의의 엄청 작은 수로 초기화하여 어떤 값이 나오든 이보다는 항상 크도록 한다.

dfs(1, number[0], operator[0], operator[1], operator[2], operator[3])

print(max_result)
print(min_result)