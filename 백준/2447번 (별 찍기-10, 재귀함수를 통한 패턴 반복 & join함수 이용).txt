def make_star(n):
    if (n == 3):
        return ["***", "* *", "***"]
    else:
        star = []
        #각 패턴의 정사각형을 받아 최종 모양을 받는 배열

        arr = make_star(n//3)
        #N/3의 패턴으로 둘러싼 형태이므로 3으로 계속해서 나눈다.
        #즉 길아가 9인 정사각형은 길이가 3인 정사각형의 패턴이 반복된 정사각형이고
        #3인 정사각형은 길이가 1인 정사각형의 패턴이 반복된 정사각형이다.
        #n이 3이 될때까지 재귀로 계속 내려간다. 그리고 3에 도달하면 위의 배열을 return받는다.
        #그리고 해당 배열을 star에 넣도록 하고 그 값을 다시 또 이전으로 return하도록 한다.

        """
        예를 들어 n = 9인 경우 별 찍기 모양은
        ooo
        oxo
        ooo 와 같다.
        
        단, 이때 o는
        ***
        * *
        *** 와 같은 형태이고
        x는 텅 비어있는 공간을 의미한다.
        
        아래의 for문 3개에서 첫번째 for문은 첫번째 ooo를 만들어주는 for문이다.
        두번째 for문은 oxo를 만들어주는 for문이고 세번째 for문은 ooo를 만들어주는 for문이다.
        
        이때 o와 x의 형태는 n==3일 때의 return 값으로 받아온 상태이다.
        """

        for i in arr:
            star.append(i*3)

        for j in arr:
            star.append(j + " "*(len(j)) + j)
            #j는 arr에 접근하는 변수이므로 j에는 ***, * *, *** 같은
            #arr에 실제 들어있는 값이 담기게 된다. 그리고 위 for문과 같이
            #이를 반복 시켜서 별 찍기 모양을 만들어야 한다.
            #그리고 이 두번째 for문에서는 oxo형태를 만들어야 하고 이 oxo 패턴은
            #o에 ***, ****** 같이 어떤 길이가 들어가든 항상 o는 *이 다 찍혀있어야하고
            #x는 항상 전부다 " "이러한 띄어쓰기로 비어져 있어야하는 상태로 고정되어있다.
            #그러므로 j 사이에 " "를 넣는 방식으로 접근하면 되고 이때 x의 길이와 o의 길이는
            #항상 같아야하므로 앞뒤에 j를 더하고 가운데의 x의 길이는 j의 길이 만큼 " "를 더해주는 것으로 한다.

        for k in arr:
            star.append(k*3)

        return star

N = int(input())
print('\n'.join(make_star(N)))
"""
'.join(리스트)
'구분자'.join(리스트)

join 함수는 매개변수로 들어온 리스트에 있는 요소 하나하나를 합쳐서 하나의 문자열로 바꾸어 반환하는 함수입니다.
''.join(리스트)''.join(리스트)를 이용하면 매개변수로 들어온 ['a', 'b', 'c'] 
이런 식의 리스트를 'abc'의 문자열로 합쳐서 반환해주는 함수인 것입니다.

'구분자'.join(리스트)'구분자'.join(리스트)를 이용하면 리스트의 값과 값 사이에 
'구분자'에 들어온 구분자를 넣어서 하나의 문자열로 합쳐줍니다.
'_'.join(['a', 'b', 'c']) 라 하면 "a_b_c" 와 같은 형태로 문자열을 만들어서 반환해 줍니다.

예. 눈치 빠르신 분들은 눈치채셨겠지만처음에 소개 해준 ''.join(리스트)는
'구분자'.join(리스트)에서 '구분자'가 그냥 공백인 것과 같습니다.
즉, 정리하자면 join함수의 찐 모양은 '구분자'.join(리스트) 입니다.

따라서 N == 3 일 때의 return값 ["***", "* *", "***"]에
'\n'.join을 적용하면 "***" + "\n" + "* *" + "\n" + "***" + "\n" 이 된다.
"""