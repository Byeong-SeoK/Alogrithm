import sys
input = sys.stdin.readline

T = int(input())

for _ in range(T):

    N = int(input()) #동전의 가지수 
    coins = list(map(int, input().split())) #동전의 종류
    M = int(input()) #만들려고 하는 값

    dp = [0] * (M+1) #목표 가치를 만들 수 있는 경우의 수를 받는 배열
    dp[0] = 1 
    #가치가 0인 것은 만들 수 있는 경우의 수가 항상 1개이다.
    #왜냐하면 동전을 사용하지 않는다는 경우의 수가 있다고 생각하기 때문이다.
    
    
    #2차원 배열의 dp배열을 1차원 배열로 줄일 수 있는 이유
    #어차피 2차원 배열의 행은 동전의 가지수에 해당하였는데
    #이것은 coins배열에 직접 접근하는 것으로 해결할 수 있다.
    #즉, 매 coin에 접근할 때 마다 dp배열을 그 상황에 맞게 갱신하는 것이다.
    #이를 통해 dp에 들어간 값을 매 coin마다 새로이 연산한다.
    
    for coin in coins: #coins배열에 coin종류 하나씩 접근한다.
        for i in range(1, M+1):
            if i >= coin: #만약 만들려고하는 가치가 사용하는 동전의 가치보다 큰 경우
                dp[i] = dp[i] + dp[i-coin]
                #현재의 경우의 수에 i-coin번째의 경우의 수를 추가한다.
                #i-coin인 이유는 coin만큼의 가치의 동전을 사용할 경우
                #생기는 총 경우의 수는 해당 가치를 뺀 i-coin의 경우의 수와 같기 때문이다.
                
    print(dp[M])