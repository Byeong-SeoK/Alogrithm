from collections import deque
import sys
def bfs(end):

    while queue:
        node = queue.popleft()

        if(node == end): #도착점에 도달한 경우
            return depth[node] #그때의 시간을 반환한다.

        for next in (node-1, node+1, node*2):
            if(0 <=  next <= MAX and not depth[next]):
                #다음 탐색할 지점의 번호가 MAX(최대)값보다 작거나 같을 때만
                #탐색을 하고 그보다 크면 탐색하지 않는다.
                #또 한번 탐색한 곳은 다시 탐색하지 않아야 하므로
                #not depth[next]를 통해서 depth[next]값이 0인
                #즉, 탐색한 적이 없기 때문에 해당 지점에 도착 시각이 0초인 곳만
                #bfs로 탐색하고 이를 deque에 집어넣도록 한다.
                
                queue.append(next)
                depth[next] = depth[node] + 1


N, K = map(int, sys.stdin.readline().split())
#N은 수빈이가 있는 위치, K는 동생이 있는 위치이다.

MAX = 10000000 #bfs 탐색의 한계를 지정, 너무 크면 시간초과 발생, 즉 시간 배열의 크기를 MAX+1로 제한하는 것으로 bfs 탐색의 제한을 둔다.

depth = [0]*(MAX+1) #각각이 얼마나 깊게 탐색된 것인지(해당 지역까지 가는데 얼마나 걸리는지)를 받는 배열
queue = deque([N]) #bfs탐색을 위한 deque, 일반 배열로 하면 시간초과가 발생한다.
print(bfs(K))