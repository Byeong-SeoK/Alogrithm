def solution(s):
    length = 1e9t
    
    if(len(s) == 1):
        #문자열이 1개인 상황에는 아래 for문의 len(s)//2+1에서
        #1이라는 값이 나와 for문의 범위가 1,1이 되어 for문을 돌지 못한다.
        #그래서 올바르게 dividing을 할 수 없어 따로 처리해 주어야 한다.
        length = 1
        return length
    
    
    for i in range(1, len(s) // 2 + 1):
        divide = [] #쪼개진 값들이 들어가는 배열
        express = '' #쪼개진 부분의 문자열
        for j in range(0, len(s), i):
            express = s[j:j + i]
            #쪼개는 범위에 맞게 for문에서 접근하는 위치를 변화하도록 한다.
            #그리고 이러한 값들을 divide에 넣는다.
            
            divide.append(express)

        temp = divide[0] #이후에 중복되는 문자열이 있는지 찾기 위한 값
        count = 1 #중복되는 것들은 숫자로 표현할 수 있으므로 선언한 변수
        result = '' #최종 문자열이 들어가는 변수
        for k in range(1, len(divide)):
            if (temp == divide[k]):
                count = count + 1
            else:
                if (count == 1): 
                    #count가 1일 때는 1을 생략할 수 있으므로 별도로 다뤄준다.
                    result = result + temp
                    temp = divide[k]
                else:
                    result = result + str(count) + temp
                    count = 1
                    temp = divide[k]
        
        #아래의 조건문은 for문을 통해 마지막 문자열을 처리할 때
        #for문 내에서 result에 추가하지 못하는 문제가 있으므로
        #이를 for문이 다 돈 외부에서 처리하도록 한다.
        if (count == 1):
            result = result + temp
        else:
            result = result + str(count) + temp

        #print(result)

        if (length > len(result)):
            length = len(result)

    
    #print(length)
    return length