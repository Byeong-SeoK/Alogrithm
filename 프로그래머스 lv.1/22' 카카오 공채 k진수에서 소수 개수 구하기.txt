import math

def find_prime(number):
    for i in range(2, int(math.sqrt(number))+1):
        #소수를 찾을 때는 2부터 number까지 일일히 나누어서 찾아봐도 되지만,
        #너무 큰 수에 있어서는 너무 많은 반복이 발생하게 된다.
        #그러므로 number의 제곱근까지만 나누어도 충분히 찾을 수 있다는
        #규칙성을 이용하여 해당 숫자가 소수인지 판별한다.
        
        if(number % i == 0):
            return False
    
    return True


def solution(n, k):
    answer = 0
    
    number = ""
    while n != 0:
        remain = n % k
        n = n // k
        number = number + str(remain)

    number = number[::-1] 
    #[::-1]로 문자열을 역순으로 바꿀수 있다.
    #위와 같은 []이 가능한 이유는 string은 하나의 배열이라고 볼 수 있기 때문이다.
    
    #print(number)
    
    candidate = number.split("0")
    #0P0, 0P, P0 형태를 찾아야하므로 string을 0을 기준으로 쪼갠다.
    
    #print(candidate)
    
    for i in candidate:
        if(i == ""): 
            #candidate가 00이었던 경우 0을 기준으로 쪼개면 ""이 된다.
            #그러므로 이 경우는 제외한다.
            continue
        elif(i == "1"):
            continue
        else:
            i = int(i) #i는 string 타입이므로 int로 타입을 바꾼다.
            if(find_prime(i)):
                answer = answer+1
    
    return answer